import os
import sys
import json
from typing import List, Dict
from langchain.tools import BaseTool
from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain.agents import create_openai_functions_agent, AgentExecutor
from langchain_openai import ChatOpenAI
from dotenv import load_dotenv

# Add parent directory to path for imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from tools.spotify_tool import SpotifyTool
from config.settings import OPENAI_API_KEY

load_dotenv()

class MusicIntegrationAgent:
    """Integrates with Spotify to find real tracks and create playlists"""
    
    def __init__(self):
        self.name = "MusicIntegration"
        self.llm = ChatOpenAI(
            api_key=OPENAI_API_KEY,
            model="gpt-3.5-turbo",
            temperature=0.7
        )
        self.tools = [SpotifyTool()]
        self.agent_executor = self._create_agent_executor()
    
    def _get_system_prompt(self) -> str:
        return """You are the Music Integration Agent that connects yoga playlists with Spotify.
        
        Your role is to:
        1. Take playlist recommendations and find real Spotify tracks
        2. Verify track availability on Spotify
        3. Create actual Spotify playlists for teachers
        4. Provide alternative suggestions if tracks aren't found
        
        You have access to spotify_search tool that can:
        - Search for specific tracks: "action:search,track:Artist - Song"
        - Test connection: "action:test"
        
        Always provide helpful alternatives if the exact track isn't found."""
    
    def _create_agent_executor(self):
        """Create the LangChain agent executor"""
        prompt = ChatPromptTemplate.from_messages([
            ("system", self._get_system_prompt()),
            MessagesPlaceholder(variable_name="chat_history"),
            ("human", "{input}"),
            MessagesPlaceholder(variable_name="agent_scratchpad")
        ])
        
        agent = create_openai_functions_agent(self.llm, self.tools, prompt)
        return AgentExecutor(agent=agent, tools=self.tools, verbose=True)
    
    def search_playlist_tracks(self, playlist_text: str) -> Dict:
        """Parse playlist text and search for tracks on Spotify"""
        
        # Extract track suggestions from playlist text
        tracks = self._extract_tracks_from_text(playlist_text)
        
        if not tracks:
            return {
                "success": False,
                "error": "No tracks found in playlist text"
            }
        
        print(f"üîç Extracted tracks: {tracks}")  # Debug line
        print(f"üîç Searching for {len(tracks)} tracks on Spotify...")
        
        # Use Spotify tool to search for each track
        spotify_tool = SpotifyTool()
        found_tracks = spotify_tool.search_multiple_tracks(tracks)
        
        # Organize results
        successful_tracks = []
        failed_tracks = []
        
        for original_query, result in found_tracks.items():
            if result['found']:
                successful_tracks.append({
                    'original_query': original_query,
                    'spotify_data': result
                })
            else:
                failed_tracks.append({
                    'original_query': original_query,
                    'error': result['error']
                })
        
        return {
            "success": True,
            "total_tracks": len(tracks),
            "found_count": len(successful_tracks),
            "failed_count": len(failed_tracks),
            "successful_tracks": successful_tracks,
            "failed_tracks": failed_tracks
        }
    
    def _extract_tracks_from_text(self, playlist_text: str) -> List[str]:
        """Extract track names from playlist text"""
        tracks = []
        lines = playlist_text.split('\n')
        
        for line in lines:
            line = line.strip()
            # Look for lines that start with ‚Ä¢ OR - and contain track info
            if (line.startswith('‚Ä¢') or line.startswith('-')) and ' - ' in line:
                # Remove the bullet point or dash and clean up
                if line.startswith('‚Ä¢'):
                    track_info = line[1:].strip()
                elif line.startswith('-'):
                    track_info = line[1:].strip()
                tracks.append(track_info)
        
        return tracks
    
    def create_spotify_playlist(self, playlist_name: str, track_ids: List[str]) -> str:
        """Create actual Spotify playlist"""
        spotify_tool = SpotifyTool()
        
        try:
            result = spotify_tool.create_playlist(
                playlist_name=playlist_name,
                track_ids=track_ids,
                description="Generated by Yoga Playlist AI"
            )
            return result
        except Exception as e:
            return f"‚ùå Failed to create playlist: {str(e)}"
    
    def process_full_playlist(self, class_name: str, playlist_text: str) -> Dict:
        """Complete workflow: search tracks and create playlist"""
        
        print(f"üéµ Processing playlist for {class_name}")
        
        # Step 1: Search for tracks
        search_results = self.search_playlist_tracks(playlist_text)
        
        if not search_results["success"]:
            return search_results
        
        # Step 2: Prepare for playlist creation
        successful_tracks = search_results["successful_tracks"]
        track_ids = [track["spotify_data"]["spotify_id"] for track in successful_tracks]
        
        print(f"‚úÖ Found {len(track_ids)} tracks on Spotify")
        
        if search_results["failed_count"] > 0:
            print(f"‚ö†Ô∏è  {search_results['failed_count']} tracks not found:")
            for failed in search_results["failed_tracks"]:
                print(f"   ‚Ä¢ {failed['original_query']}")
        
        # Step 3: Create playlist (optional - can be done separately)
        playlist_name = f"{class_name} - Yoga Playlist"
        
        return {
            "success": True,
            "class_name": class_name,
            "search_results": search_results,
            "playlist_name": playlist_name,
            "track_ids": track_ids,
            "ready_for_spotify": len(track_ids) > 0
        }
    
    def test_spotify_connection(self) -> str:
        """Test Spotify connection"""
        request = "Test my Spotify connection"
        
        try:
            result = self.agent_executor.invoke({
                "input": request,
                "chat_history": []
            })
            return result["output"]
        except Exception as e:
            return f"Error testing connection: {str(e)}"


# Test the Music Integration agent
if __name__ == "__main__":
    agent = MusicIntegrationAgent()
    
    print("=== Testing Music Integration Agent ===")
    
    # Test 1: Spotify connection
    print("\n1. Testing Spotify connection:")
    result = agent.test_spotify_connection()
    print(result)
    
    # Test 2: Sample playlist processing
    sample_playlist = """
    **WARMUP (9 minutes)**
    BPM: 70-85 | Energy: Building, welcoming
    ‚Ä¢ Lauryn Hill - Ex-Factor
    ‚Ä¢ Erykah Badu - On & On
    ‚Ä¢ D'Angelo - Brown Sugar
    
    **FLOW (27 minutes)**
    BPM: 90-110 | Energy: Sustained, rhythmic
    ‚Ä¢ Tupac - California Love
    ‚Ä¢ Biggie - Juicy
    ‚Ä¢ Nas - The World Is Yours
    ‚Ä¢ Jay-Z - Empire State of Mind
    
    **PEAK (15 minutes)**
    BPM: 100-120 | Energy: High intensity, motivating
    ‚Ä¢ DMX - X Gon' Give It To Ya
    ‚Ä¢ LL Cool J - Mama Said Knock You Out
    
    **COOLDOWN (9 minutes)**
    BPM: 60-75 | Energy: Releasing, peaceful
    ‚Ä¢ Lauryn Hill - To Zion
    ‚Ä¢ Common - The Light
    """
    
    print("\n2. Processing sample hip-hop yoga playlist:")
    result = agent.process_full_playlist("Jenny's Yoga Sculpt", sample_playlist)
    
    if result["success"]:
        print(f"\nüéâ SUCCESS!")
        print(f"Found: {result['search_results']['found_count']}/{result['search_results']['total_tracks']} tracks")
        print(f"Ready for Spotify: {result['ready_for_spotify']}")
        print(f"Playlist name: {result['playlist_name']}")
        
        # Show found tracks
        if result['search_results']['successful_tracks']:
            print(f"\n‚úÖ Found tracks:")
            for track in result['search_results']['successful_tracks'][:3]:  # Show first 3
                spotify_data = track['spotify_data']
                artists = ", ".join(spotify_data['artists'])
                print(f"   ‚Ä¢ {artists} - {spotify_data['name']}")
    else:
        print(f"‚ùå FAILED: {result.get('error', 'Unknown error')}")


 
